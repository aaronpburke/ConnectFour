/*
 * 98Point6 Drop-Token
 *
 * At-home interview implementation of \"98Point6 Drop-Token\" homework assignment
 *
 * OpenAPI spec version: 1.0.0
 * Contact: aaron@focuszonedevelopment.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using ConnectFour.Api.Attributes;
using ConnectFour.Api.Models;
using Microsoft.AspNetCore.Mvc;
using Swashbuckle.AspNetCore.Annotations;
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;

namespace ConnectFour.Api.Controllers
{
    /// <summary>
    /// 
    /// </summary>
    [ApiController]
    public class GameActionsApiController : ControllerBase
    {
        /// <summary>
        /// Get a previously played move.
        /// </summary>
        /// <param name="gameId">ID of the game to get move from</param>
        /// <param name="moveNumber">Move sequence number to get</param>
        /// <response code="200">Returns the requested game move.</response>
        /// <response code="400">Malformed request.</response>
        /// <response code="404">Game/move not found</response>
        [HttpGet]
        [Route("/drop-token/{gameId}/moves/{moveNumber}")]
        [ValidateModelState]
        [SwaggerOperation("GetMove")]
        [SwaggerResponse(statusCode: 200, type: typeof(GameMove), description: "Returns the requested game move.")]
        public virtual IActionResult GetMove([FromRoute][Required]string gameId, [FromRoute][Required]string moveNumber)
        {
            throw new NotImplementedException();
        }

        /// <summary>
        /// Get a (sub-)list of the moves played.
        /// </summary>
        /// <param name="gameId">ID of the game to get moves from</param>
        /// <param name="start">Starting move to return (inclusive)</param>
        /// <param name="until">Ending move to return (inclusive)</param>
        /// <response code="200">Returns the requested game moves.</response>
        /// <response code="400">Malformed request.</response>
        /// <response code="404">Game/moves not found</response>
        [HttpGet]
        [Route("/drop-token/{gameId}/moves")]
        [ValidateModelState]
        [SwaggerOperation("GetMoves")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<GameMove>), description: "Returns the requested game moves.")]
        public virtual IActionResult GetMoves([FromRoute][Required]string gameId, [FromQuery]int? start, [FromQuery]int? until)
        {
            throw new NotImplementedException();
        }

        /// <summary>
        /// Play a new move.
        /// </summary>
        /// <param name="gameId">ID of the game to play move on</param>
        /// <param name="playerId">Name of the player playing the move</param>
        /// <response code="200">Returns the new move.</response>
        /// <response code="400">Malformed input. Illegal move.</response>
        /// <response code="404">Game not found or player is not a part of it.</response>
        /// <response code="409">Player tried to act when it's not their turn.</response>
        [HttpPost]
        [Route("/drop-token/{gameId}/moves/{playerId}")]
        [ValidateModelState]
        [SwaggerOperation("PlayMove")]
        [SwaggerResponse(statusCode: 200, type: typeof(GameMove), description: "Returns the new move.")]
        public virtual IActionResult PlayMove([FromRoute][Required]string gameId, [FromRoute][Required]string playerId)
        {
            throw new NotImplementedException();
        }

        /// <summary>
        /// Quit player from the game.
        /// </summary>
        /// <param name="gameId">ID of the game to quit</param>
        /// <param name="playerId">Name of the player quitting the game</param>
        /// <response code="202">Player quit.</response>
        /// <response code="404">Game not found or player is not a part of it.</response>
        /// <response code="410">Game is already in DONE state.</response>
        [HttpDelete]
        [Route("/drop-token/{gameId}/{playerId}")]
        [ValidateModelState]
        [SwaggerOperation("PlayerQuit")]
        public virtual IActionResult PlayerQuit([FromRoute][Required]string gameId, [FromRoute][Required]string playerId)
        {
            throw new NotImplementedException();
        }
    }
}
